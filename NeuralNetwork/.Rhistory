g
g <- ggplot(data=mtcars, aes(x=wt, y=mpg, as.factor(colour=am)))
g
g <- g + geom_point(size=5)
g
? ggplot
mtcars$am <- as.factor(mtcars$am)
head(mtcars)
head(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
mtcars
data(mtcars)
d <- data(mtcars)
levels(d$am) <- c("Automatic", "Manual")
levels(mtcars$am) <- c("Automatic", "Manual")
mtcars
data(mtcars)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g <- ggplot(mtcars,aes(x=wt,y=mpg,colour=transmission))
g <- g + geom_point(size=5)
g
g <- ggplot(mtcars,aes(x=wt,y=mpg,colour=am))
g <- g + geom_point(size=5)
g
g <- g+ geom_smooth(method = "lm", colour = am)
g <- g+ geom_smooth(method = "lm", colour = mtcars$am)
g
g <- g+ geom_smooth(method = "lm", colour = "black")
g
g <- ggplot(mtcars,aes(x=wt,y=mpg),)
g <- g+ geom_point(size=2, colour="black", alpha=0.2)
g <- g+ geom_point(size = 2, colour = "blue", alpha = 0.2)
g <- g + geom_smooth(method = "lm", colour = "black")
g
g
fit <- lm(mpg~am,data=mtcars)
onlyam <- fit$coef[2]
library(ggplot2)
g5 <- ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))
g5 <- g5+geom_point(colour="black",size=2)
g5 <- g5+xlab("transmission")+ylab("mpg")
g5 <- g5+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g5
fit <- lm(mpg~am,data=mtcars)
onlyam <- fit$coef[2]
library(ggplot2)
g5 <- ggplot(data=mtcars,aes(y=mpg,x=transmission,fill=transmission))
g5 <- g5+geom_violin(colour="black",size=2)
g5 <- g5+xlab("transmission")+ylab("mpg")
g5 <- g5+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g5
g5 <- ggplot(data=mtcars,aes(y=mpg,x=am,fill=am))
g5 <- g5+geom_violin(colour="black",size=2)
g5 <- g5+xlab("transmission")+ylab("mpg")
g5 <- g5+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g5
g5 <- g5+geom_point(colour="black",size=2)
g5 <- g5+xlab("transmission")+ylab("mpg")
g5 <- g5+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g5
g5 <- ggplot(data=mtcars,aes(y=mpg,x=am,fill=am))
g5 <- g5+geom_point(colour="black",size=2)
g5 <- g5+xlab("transmission")+ylab("mpg")
g5 <- g5+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g5
?lm
library(gglpot)
library(ggplot2)
data("mtcars")
ggplot(mtcars, aes(x = mpg, y = wt, colour=am)) + geom_point() + geom_line()
ggplot(mtcars, aes(x = mpg, y = wt, colour=am)) + geom_point()
ggplot(mtcars, aes(x = mpg, y = wt, colour=am)) + geom_point() + geom_smooth(se = FALSE, method = "lm")
head(mpg)
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
ggplot(mtcars, aes(mpg, wt, colour = am)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
head(mtcars)
ggplot(mtcars, aes(mpg, wt, colour = am)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
fit <- lm(mpg~wt,data=mtcars)
fit
fit <- lm(mpg~am,data=mtcars)
fit
h <- cor(x=mtcars$mpg,y=mtcars$cyl)
d <- cor(x=mtcars$mpg,y=mtcars$wt)
h
d
lm(mpg~wt,data=mtcars)
fit1 <- lm(mpg~wt,data=mtcars)
onlyam <- as.numeric(round(fit$coef[2],2))
fit2 <- update(fit1,mpg~wt+am)
wtam <- (as.numeric(round(fit2$coef[2],2))*-1)
fit3 <- update(fit2,mpg~wt+am+hp)
fit1
fit2
fit3
boxplot(mpg ~ wt, data = mtcars)
boxplot(mpg ~ am, data = mtcars)
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission", ylab = "Miles per gallon", main = "mpg vs transmission")
mean(mtcars[mtcars$am = "manual", "mpg"])
mean(mtcars[mtcars$am == "manual", "mpg"])
mtcars[mtcars$am == "manual", "mpg"]
head(mtcars)
mtcars[mtcars$am == "manual",]
mtcars[mtcars$am == "Manual",]
mtcars[mtcars$am == "Manual", "mpg"]
mean(mtcars[mtcars$am == "Manual", "mpg"])
mean(mtcars[mtcars$am == "Manual", "mpg"]) - mean(mtcars[mtcars$am == "Automatic", "mpg"])
fit1 <- lm(mpg~wt,data=mtcars)
fit1
fit <- lm(mpg~am,data=mtcars)
fit2 <- update(fit1,mpg~wt+am)
fit3 <- update(fit2,mpg~wt+am+hp)
fit
fit1
fit2
fit3
?mtcars
fit1$coef[2]
update(fit1,mpg~wt+am)
fit2 <- lm(mpg~wt + am,data=mtcars)
summary(fit2)
library(ggplot2)
data(mtcars)
mean(mtcars[mtcars$am == 1, "mpg"]) - mean(mtcars[mtcars$am == 2, "mpg"])
mtcars[mtcars$am == 1, "mpg"]
mean(mtcars[mtcars$am == 1, "mpg"])
mean(mtcars[mtcars$am == 2, "mpg"])
mean(mtcars[mtcars$am == 0, "mpg"])
head(mtcars)
t.test(mpg ~ am, data = mtcars)
t <- t.test(mpg ~ am, data = mtcars)
t$p.value
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
g1 <- ggplot(mtcars, aes(y = mpg, x = wt, colour = am))
g1 <- g1 + geom_point()
g1 <- g1 + geom_smooth(se = FALSE, method = "lm")
g1
swirl()
library(swirl)
swirl()
swirl()
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
head(training)
head(testing)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10, list=TRUE, returnTrain = FALSE)
folds
dim(folds)
dim(folds)
dim(folds$Fold01)
sapply(folds, length)
folds <- createFolds(y=spam$type,k=10, list=TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1]][1:10]
folds[[2]][1:10]
folds[[3]][1:10]
install.packages("ISLR")
library(ISLR)
data("Wage")
summary(wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
head(training)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
folds
head(folds)
dim(folds)
sapply(folds, length)
folds[1]
folds[1][1:10]
folds[[1]][1:10]
folds[[2]][1:10]
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon = 10)
names(folds)
head(folds)
folds$train[[1]]
folds$test[[1]]
folds$test[[2]]
folds$train[[2]]
folds$train[[2]][1]
folds$test$Testing001
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type~.,data=training, method="glm")
install.packages("e1071")
library(e1071)
modelFit <- train(type~.,data=training, method="glm")
modelFit
modelFit$results
install.packages("islr")
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data("Wage")
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
dim(Wage)
featurePlot(x=training[,c("age", "education", "jobclass")], y = training$wage, plot="pairs")
qplot(age, wage,data=training)
qq <- qplot(age, wage, colour=education, data = training)
qq + geom_smooth(method="lm", formula=y~x)
install.packages("Hmisc")
library(ISLR)
library(caret)
data("Wage")
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain]
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
head(training)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
diagnosis
diagnosis
adData = data.frame(diagnosis,predictors)
head(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50)
library(caret)
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
dim(adData)
adData = data.frame(diagnosis,predictors)
dim(adData)
typeof(adData)
adData = data.frame(predictors)
typeof(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
typeof(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
head(training)
library(Hmisc)
cut <- cut2(training$CompressiveStrength, g=3)
p1 <- qplot(cut, training$CompressiveStrength, data=training, fill=cut, geom=c("boxplot"))
p1
head(training)
p1 <- qplot(cut, training$Age, data=training, fill=cut, geom=c("boxplot"))
p1
p1 <- qplot(cut, training$FlyAsh, data=training, fill=cut, geom=c("boxplot"))
p1
training <- mutate(training, index=1:nrow(training))
suppressMessages(library(dplyr))
install.packages("dplyr")
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
suppressMessages(library(Hmisc))
training <- mutate(training, index=1:nrow(training))
x<-rnorm(50)
mean(x)
sd(x)
y=x+rnorm(50, mean=50, sd=.1)
cor(x,y)
plot(x,y)
x=rnorm(100)
y = rnorm(100)
y = x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
x=seq (1 ,10)
x=seq(-pi ,pi ,length =50)
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour (x,y,f,nlevels =45, add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa ,theta =30)
A=matrix (1:16 ,4 ,4)
a
A
attach (Auto)
Auto=read.table ("Auto.data ")
library(ISLR)
data(Auto)
names(Auto)
plot(cylinders , mpg)
attach (Auto)
plot(cylinders , mpg)
cylinders =as.factor (cylinders )
plot(cylinders , mpg)
plot(cylinders , mpg , col ="red ")
plot(cylinders , mpg , col ="red", varwidth =T)
plot(cylinders , mpg , col ="red", varwidth =T, xlab=" cylinders ",
ylab ="MPG ")
hist(mpg)
hist(mpg ,col =2)
hist(mpg ,col =2, breaks =15)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration , Auto)
plot(horsepower ,mpg)
identify (horsepower ,mpg ,name)
names(Auto)
head(Auto)
demo()
graphics()
graphics
library(graphics)
graphics()
graphics
demo(package = .packages())
demo()
demo(package = .packages(all.available = TRUE))
demo(package = .packages(graphics))
demo()
library(ISLR)
names(Smarket)
summary(Smarket)
head(Smarket)
cor(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef[,4]
glm.prob=predict(glt.fit, type="response")
glm.prob=predict(glm.fit, type="response")
glm.prob[1:10]
names(glm.prob)
glm.prob
contrasts(Direction)
glm.pred=rep("Down", 1250)
glm.pred
glm.pred[glm.probs>.5]="Up"
glm.pred[glm.prob>.5]="Up"
table(glm.pred, Direction)
library(ISLR)
set.seed(1)
train = sample(392, 196)
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
predict(lm.fit, Auto)
lm.fit = lm(mpg~horsepower, data=Auto, subset=train)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
predict(lm.fit, Auto)[-train]
length(predict(lm.fit, Auto)[-train])
length(predict(lm.fit, Auto))
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
install.packages("leaps")
library(leaps)
regfit.full=regsubsets(Salary~., Hitters)
Summary(regfit.full)
regfit.full
regfit.full=regsubsets(Salary~., data=Hitters, nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss, xlab="number of variables", ylab="RSS", type="l")
plot(reg.summary$adjr2, xlab="number of variables", ylab="adj Rsq", type="l")
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col="red", cex=2, pch=20)
plot(reg.summary$cp, xlab="number of variables", ylab="Cp", type="l")
which.min((reg.summary$cp))
points(10, reg.summary$cp[10], col="red", cex=2, pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="number of variables", ylab="BIC", type="l")
points(6, reg.summary$bic[6], col="red", cex=2, pch=20)
plot(regfit.full, scale="r2")
plot(regfit.full, scale="adjr2")
plot(regfit.full, scale="Cp")
plot(regfit.full, scale="bic")
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit=pcr(Salary~., data=Hitters, scale=TRUE)
pcr.fit=pcr(Salary~., data=Hitters, scale=TRUE, validation="CV")
summary(pcr.fit)
data <- "54.3925,53.9419,55.6075,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.3925,53.9419,50.2336,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.3925,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.2056,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.5794,53.9419,44.3925,55.2,54.2056,46.2687,55.1402,53.4161,52.3364,49.3458,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,56.0748,50.0935,53.9419,44.3925,55.2,54.2056,47.3881,55.1402,54.6584,57.0093,47.1028,53.9419,44.3925,55.7333,54.2056,47.0149,55.6075,53.4161,60.7477,51.5888,53.9419,44.3925,55.7333,54.2056,46.2687,57.0093,55.2795,58.8785,45.6075,53.9419,44.3925,55.7333,54.2056,45.8955,57.0093,55.2795,53.271,51.5888,53.9419,44.3925,56,54.2056,45.8955,57.4766,55.9006,48.5981,49.1589,53.9419,44.3925,57.0667,54.2056,48.5075,58.4112,55.9006,53.271,50.6542,53.9419,44.3925,56.5333,54.5171,47.0149,54.2056,55.9006,48.5981,53.271,53.9419,44.3925,56.8,54.2056,47.7612,56.5421,54.0373,50.4673,49.7196,53.9419,44.3925,56.5333,54.8287,50,56.0748,55.9006,50.4673,52.3364,53.9419,44.3925,56.8,55.1402,47.0149,55.6075,57.764,59.8131,50.8411,53.9419,44.3925,55.4667,56.3863,46.2687,56.0748,61.4907,54.2056,52.5234,53.9419,44.3925,56.8,57.9439,46.2687,57.0093,54.6584,53.271,51.4019,53.9419,44.3925,57.8667,56.3863,48.5075,56.5421,54.6584,50.4673,51.9626,53.9419,44.3925,57.0667,56.6978,49.2537,56.0748,56.5217,49.5327"
data
plot(data)
plot(x=data)
plot(y=data)
dim(data)
type(data)
data.frame(data)
data
setwd("D:/personal/Code/NeuralNetwork/NeuralNetwork")
d <- read.csv("neuralnetwork.log")
d
dim(d)
d[1,]
plot(d[1,])
plot(d[1,], type="p")
d1 <- d[1,]
dim(d1)
d1 <- d[1:181]
d1
dim(d1)
d1 <- d[1,]
typeof(d1)
typeof(d)
dat <- list(a=1:5,b=2:7,c=3:10)
dat
good <- list(c(8, 12, 10, 15, 25, 2, 3, 21), c(6, 2, 7, 24, 34, 5))
good
d <- list(c(54.3925,53.9419,55.6075,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.3925,53.9419,50.2336,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.3925,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.2056,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,52.3364,54.5794,53.9419,44.3925,55.2,54.2056,46.2687,55.1402,53.4161,52.3364,49.3458,53.9419,44.3925,55.2,54.2056,55.2239,55.1402,53.4161,56.0748,50.0935,53.9419,44.3925,55.2,54.2056,47.3881,55.1402,54.6584,57.0093,47.1028,53.9419,44.3925,55.7333,54.2056,47.0149,55.6075,53.4161,60.7477,51.5888,53.9419,44.3925,55.7333,54.2056,46.2687,57.0093,55.2795,58.8785,45.6075,53.9419,44.3925,55.7333,54.2056,45.8955,57.0093,55.2795,53.271,51.5888,53.9419,44.3925,56,54.2056,45.8955,57.4766,55.9006,48.5981,49.1589,53.9419,44.3925,57.0667,54.2056,48.5075,58.4112,55.9006,53.271,50.6542,53.9419,44.3925,56.5333,54.5171,47.0149,54.2056,55.9006,48.5981,53.271,53.9419,44.3925,56.8,54.2056,47.7612,56.5421,54.0373,50.4673,49.7196,53.9419,44.3925,56.5333,54.8287,50,56.0748,55.9006,50.4673,52.3364,53.9419,44.3925,56.8,55.1402,47.0149,55.6075,57.764,59.8131,50.8411,53.9419,44.3925,55.4667,56.3863,46.2687,56.0748,61.4907,54.2056,52.5234,53.9419,44.3925,56.8,57.9439,46.2687,57.0093,54.6584,53.271,51.4019,53.9419,44.3925,57.8667,56.3863,48.5075,56.5421,54.6584,50.4673,51.9626,53.9419,44.3925,57.0667,56.6978,49.2537,56.0748,56.5217,49.5327))
dim(d)
typeof(d)
d
plot(d[[1]], type="l")
d <- read.csv("neuralnetwork.log")
dim(d)
typeof(d)
d[1]
d[[1]]
d1 <- list(c(d[1,]))
d1
plot(d[[1]], type="l")
plot(d[[2]], type="l")
plot(d[[3]], type="l")
d <- list(c(55.1402,55.1402,55.1402,55.6075,55.1402,55.1402,55.6075,55.1402,57.4766,57.4766,59.3458,60.2804,56.5421,56.5421,54.6729,56.0748,55.1402,55.6075,56.0748,56.0748))
plot(d[[1]], type="l")
d <- list(c(55.1402,55.1402,55.1402,55.1402,55.1402,55.1402,55.1402,56.0748,55.6075,55.1402,59.8131,55.6075,55.1402,57.4766,56.0748,56.5421,56.5421,56.0748,56.5421,56.5421))
plot(d[[1]], type="l")
d <- list(c(54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,55.1402,54.8287,54.5171,55.1402,56.3863,54.5171,56.3863))
plot(d[[1]], type="l")
d <- list(c(54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,54.2056,56.6978,55.4517,55.1402,56.6978))
plot(d[[1]], type="l")
